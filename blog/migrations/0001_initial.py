# Generated by Django 3.2.19 on 2023-07-22 11:35

import cloudinary.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField()),
                ('featured_image_default', cloudinary.models.CloudinaryField(blank=True, max_length=255, verbose_name='image')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('featured_image', cloudinary.models.CloudinaryField(blank=True, default='', max_length=255, verbose_name='image')),
                ('excerpt', models.TextField(blank=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Published'), (2, 'Archived')], default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='blog.category')),
                ('likes', models.ManyToManyField(blank=True, related_name='blogpost_like', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-created_on',),
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('body', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('research_objective_and_importance', models.PositiveIntegerField(choices=[(1, '1-Needs Improvement'), (2, '2-Fair'), (3, '3-Average'), (4, '4-Good'), (5, '5-Excellent')], default=1)),
                ('methodology_and_experimental_design', models.PositiveIntegerField(choices=[(1, '1-Needs Improvement'), (2, '2-Fair'), (3, '3-Average'), (4, '4-Good'), (5, '5-Excellent')], default=1)),
                ('results_and_data_analysis', models.PositiveIntegerField(choices=[(1, '1-Needs Improvement'), (2, '2-Fair'), (3, '3-Average'), (4, '4-Good'), (5, '5-Excellent')], default=1)),
                ('discussion_and_interpretation', models.PositiveIntegerField(choices=[(1, '1-Needs Improvement'), (2, '2-Fair'), (3, '3-Average'), (4, '4-Good'), (5, '5-Excellent')], default=1)),
                ('contribution_and_originality', models.PositiveIntegerField(choices=[(1, '1-Needs Improvement'), (2, '2-Fair'), (3, '3-Average'), (4, '4-Good'), (5, '5-Excellent')], default=1)),
                ('approved', models.BooleanField(default=False)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='blog.post')),
            ],
        ),
    ]
